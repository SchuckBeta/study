----------------------------------------------------------------------------------------------
Git操作指导
----------------------------------------------------------------------------------------------
前言：
	11：Git由来
	21、为什么使用Git：
		a、为什么要抛弃Svn、Cvs等版本控制工具？
	31、Git怎么使用：
		a、Git基本安装
		b、Git相关概念
		c、Git仓库
		d、Git常用命令
	41、Git与SVN相似点
	51、Git相关生态：
		a、GitHub、GitLab、Gerrit


正文：
	11：Git由来
		开源：开源社区
		Linus(莱纳斯)、Linux、Git、开源、代码仓库
		由来：
			http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000

	21、为什么使用Git：
		a、对于软件开发中，代码版本控制是很有必要的，大家熟悉的有SVN工具，而Git相比SVN而言，SVN是（集中式）服务器、客户端的结构，Git(分布式)，每一台主机节点既是服务器，同时也是客户端，能够简单方便的实现代码版本、分支、合并、授权、发布相关控制，具体详情，请查看下列地址。
			集中式Vs分布式:http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000

	31、Git怎么使用：
		a、Git基本安装（Git Community Book 中文版.pdf-20页）
			Window环境：
				Git-2.9.3.2-64-bit.exe
				TortoiseGit-1.8.9.0-64bit.msi
				TortoiseGit-LanguagePack-1.8.9.0-64bit-zh_CN.msi
			CentOs环境（在redhat等系统下用yum）：
				yum install git-core
				yum install gitLab
			Ubuntu环境(在debian, ubuntu等系统下用apt-get)：
				sudo apt-get install git-core
			Docker环境（拓展）：
				使用docker镜像安装gitLab，相关资料请参考（关于docker的细节我们将在另外章节介绍）：
				镜像仓库：
					https://dashboard.daocloud.io/build-flows/new
					http://get.daocloud.io/#install-docker-for-mac-windows
					https://c.163.com/hub#/m/home/
					https://csphere.cn/hub

		b、Git相关概念
	        Workspace：工作区
	        Index / Stage：暂存区
	        Repository：仓库区（或本地仓库）
	        Remote：远程仓库
	        Git概念解析及操作：
	        	http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html

		c、Git仓库(Git仓库.png)
			GitHub，GitLab，BitBucket，Coding....
			GitHub：https://github.com/SchuckBeta
			BitBucket：http://192.168.0.107:7990/

		d、Git常用命令
			Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。
				如：C:\Users\Administrator\.gitconfig

			Git目录结构：
				F:\work\doc\study\Git\git目录.png

			Git命令：
				F:\work\doc\study\Git\Git常用命令.jpg

			    # 显示当前的Git配置
			    $ git config --list

			    # 编辑Git配置文件
			    $ git config -e [--global]

			    # 设置提交代码时的用户信息
			    $ git config [--global] user.name "[name]"
			    $ git config [--global] user.email "[email address]"

			通用命令：
				#查看状态
				$ git -help
				#查看状态
				$ git status
				#查看日志
				$ git log
				# 显示commit历史，以及每次commit发生变更的文件
				$ git log --stat
				# 搜索提交历史，根据关键词
				$ git log -S [keyword]
				#查看差异
				$ git diff [id]
				# 重置暂存区与工作区，与上一次commit保持一致
				$ git reset --hard
				# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
				$ git reset [file]
				# 新建一个commit，用来撤销指定commit
				# 后者的所有变化都将被前者抵消，并且应用到当前分支
				$ git revert [commit]

			新建项目
				1）本地新建项目：		
				    # 在当前目录新建一个Git代码库
				    $ git init

				    # 新建一个目录，将其初始化为Git代码库
				    $ git init [project-name]

				    #在此时常用的操作
				    $ git remote add [shortname] [url]
				    $ git push origin [仓库分支]
				    $ git push origin [仓库分支]

			    2）仓库下载项目：
				    # 下载一个项目和它的整个代码历史
				    $ git clone [url]
				    # 下载一个项目某一个特定分支（dev）代码历史
				    $ git clone -b dev [url]

				3）分支：
					# 列出所有本地分支
					$ git branch

					# 新建本地dev分支
					$ git branch dev

					//在此我们创建4个分支备用[dev	test	105		107]

			增加/删除文件	
			    # 添加指定文件到暂存区
			    $ git add [file1] [file2] ...

			    # 添加指定目录到暂存区，包括子目录
			    $ git add [dir]

			    # 添加当前目录的所有文件到暂存区
			    $ git add .

			    # 添加每个变化前，都会要求确认
			    # 对于同一个文件的多处变化，可以实现分次提交
			    $ git add -p

			    # 删除工作区文件，并且将这次删除放入暂存区
			    $ git rm [file1] [file2] ...

			    # 停止追踪指定文件，但该文件会保留在工作区
			    $ git rm --cached [file]

			    # 改名文件，并且将这个改名放入暂存区
			    $ git mv [file-original] [file-renamed]

			代码提交	    
			    # 提交暂存区到仓库区
			    $ git commit -m [message]

			    # 提交暂存区的指定文件到仓库区
			    $ git commit [file1] [file2] ... -m [message]

			    # 提交工作区自上次commit之后的变化，直接到仓库区
			    $ git commit -a

			    # 提交时显示所有diff信息
			    $ git commit -v

			    # 使用一次新的commit，替代上一次提交
			    # 如果代码没有任何新变化，则用来改写上一次commit的提交信息
			    $ git commit --amend -m [message]

			    # 重做上一次commit，并包括指定文件的新变化
			    $ git commit --amend [file1] [file2] ...

			分支
				# 列出所有本地分支
				$ git branch

				# 列出所有远程分支
				$ git branch -r

				# 列出所有本地分支和远程分支
				$ git branch -a

				# 新建一个分支，但依然停留在当前分支
				$ git branch [branch-name]

				# 切换到指定分支，并更新工作区
				$ git checkout [branch-name]

				# 合并指定分支到当前分支
				$ git merge [branch]

				# 删除分支
				$ git branch -d [branch-name]

				# 删除远程分支
				$ git push origin --delete [branch-name]
				$ git branch -dr [remote/branch]


	41、Git与SVN相似点：
			F:\work\doc\study\Git\Git Vs Svn.png

	51、Git相关生态：
		a、GitHub：开源仓库
		b、GitLab：私有仓库（BitBucket）
		c、Gerrit：
			代码审查系统：http://blog.csdn.net/ganshuyu/article/details/8978614


总结：
	PDF：F:\work\doc\study\Git\Git Community Book 中文版.pdf
	电子书：链接：http://pan.baidu.com/s/1hsMKiZq 密码：3ior
	视频教程：链接：http://pan.baidu.com/s/1i5yv8W1 密码：i9fy
